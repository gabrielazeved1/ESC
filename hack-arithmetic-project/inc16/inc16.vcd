$date
	Fri Jul 11 13:31:21 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_inc16 $end
$var wire 16 ! out [15:0] $end
$var reg 16 " in [15:0] $end
$scope module uut $end
$var wire 16 # in [15:0] $end
$var wire 16 $ one [15:0] $end
$var wire 16 % out [15:0] $end
$scope module adder $end
$var wire 16 & a [15:0] $end
$var wire 16 ' b [15:0] $end
$var wire 16 ( sum [15:0] $end
$var wire 16 ) carry [15:0] $end
$scope begin add_bit[0] $end
$var parameter 2 * i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 + a $end
$var wire 1 , b $end
$var wire 1 - cin $end
$var wire 1 . cout $end
$var wire 1 / sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[1] $end
$var parameter 2 0 i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 cin $end
$var wire 1 4 cout $end
$var wire 1 5 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[2] $end
$var parameter 3 6 i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 7 a $end
$var wire 1 8 b $end
$var wire 1 9 cin $end
$var wire 1 : cout $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[3] $end
$var parameter 3 < i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 = a $end
$var wire 1 > b $end
$var wire 1 ? cin $end
$var wire 1 @ cout $end
$var wire 1 A sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[4] $end
$var parameter 4 B i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 C a $end
$var wire 1 D b $end
$var wire 1 E cin $end
$var wire 1 F cout $end
$var wire 1 G sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[5] $end
$var parameter 4 H i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 I a $end
$var wire 1 J b $end
$var wire 1 K cin $end
$var wire 1 L cout $end
$var wire 1 M sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[6] $end
$var parameter 4 N i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 O a $end
$var wire 1 P b $end
$var wire 1 Q cin $end
$var wire 1 R cout $end
$var wire 1 S sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[7] $end
$var parameter 4 T i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 U a $end
$var wire 1 V b $end
$var wire 1 W cin $end
$var wire 1 X cout $end
$var wire 1 Y sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[8] $end
$var parameter 5 Z i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 [ a $end
$var wire 1 \ b $end
$var wire 1 ] cin $end
$var wire 1 ^ cout $end
$var wire 1 _ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[9] $end
$var parameter 5 ` i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 a a $end
$var wire 1 b b $end
$var wire 1 c cin $end
$var wire 1 d cout $end
$var wire 1 e sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[10] $end
$var parameter 5 f i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 g a $end
$var wire 1 h b $end
$var wire 1 i cin $end
$var wire 1 j cout $end
$var wire 1 k sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[11] $end
$var parameter 5 l i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 m a $end
$var wire 1 n b $end
$var wire 1 o cin $end
$var wire 1 p cout $end
$var wire 1 q sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[12] $end
$var parameter 5 r i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 s a $end
$var wire 1 t b $end
$var wire 1 u cin $end
$var wire 1 v cout $end
$var wire 1 w sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[13] $end
$var parameter 5 x i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 y a $end
$var wire 1 z b $end
$var wire 1 { cin $end
$var wire 1 | cout $end
$var wire 1 } sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[14] $end
$var parameter 5 ~ i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 !" a $end
$var wire 1 "" b $end
$var wire 1 #" cin $end
$var wire 1 $" cout $end
$var wire 1 %" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin add_bit[15] $end
$var parameter 5 &" i $end
$scope begin genblk1 $end
$scope module fa $end
$var wire 1 '" a $end
$var wire 1 (" b $end
$var wire 1 )" cin $end
$var wire 1 *" cout $end
$var wire 1 +" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1111 &"
b1110 ~
b1101 x
b1100 r
b1011 l
b1010 f
b1001 `
b1000 Z
b111 T
b110 N
b101 H
b100 B
b11 <
b10 6
b1 0
b0 *
$end
#0
$dumpvars
0+"
0*"
0)"
0("
0'"
0%"
0$"
0#"
0""
0!"
0}
0|
0{
0z
0y
0w
0v
0u
0t
0s
0q
0p
0o
0n
0m
0k
0j
0i
0h
0g
0e
0d
0c
0b
0a
0_
0^
0]
0\
0[
0Y
0X
0W
0V
0U
0S
0R
0Q
0P
0O
0M
0L
0K
0J
0I
0G
0F
0E
0D
0C
0A
0@
0?
0>
0=
0;
0:
09
08
07
05
04
03
02
01
1/
0.
0-
1,
0+
b0 )
b1 (
b1 '
b0 &
b1 %
b1 $
b0 #
b0 "
b1 !
$end
#10000
15
13
b1 )
1.
b10 !
b10 %
b10 (
0/
1+
b1 "
b1 #
b1 &
#20000
1G
1E
1@
1?
1:
19
b1111 )
14
05
0;
b10000 !
b10000 %
b10000 (
0A
11
17
1=
b1111 "
b1111 #
b1111 &
#30000
0*"
0)"
0$"
0#"
0|
0{
0v
0u
0p
0o
0j
0i
0d
0c
0^
0E
0]
0@
0X
1A
0?
0W
0:
0R
1;
09
0Q
04
0L
15
03
0K
0.
b0 )
0F
1/
1G
1M
1S
1Y
1_
1e
1k
1q
1w
1}
1%"
b1111111111111111 !
b1111111111111111 %
b1111111111111111 (
1+"
0+
1C
1I
1O
1U
1[
1a
1g
1m
1s
1y
1!"
1'"
b1111111111111110 "
b1111111111111110 #
b1111111111111110 &
#40000
1*"
0+"
1)"
1$"
0%"
1#"
1|
0}
1{
1v
0w
1u
1p
0q
1o
1j
0k
1i
1d
0e
1c
1^
0_
1]
1X
0Y
1W
1R
0S
1Q
1L
0M
1K
1F
0G
1E
1@
0A
1?
1:
0;
19
14
05
13
b1111111111111111 )
1.
b0 !
b0 %
b0 (
0/
1+
b1111111111111111 "
b1111111111111111 #
b1111111111111111 &
#50000
